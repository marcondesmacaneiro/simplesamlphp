<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <title>simpleSAMLphp advanced features</title>

  <section>
    <title>simpleSAMLphp documentation</title>

    <para>This document is part of the simpleSAMLphp documentation
    suite.</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://rnd.feide.no/view/simplesamlphpdocs">List of
        all simpleSAMLphp documentation</ulink></para>
      </listitem>
    </itemizedlist>

    <para>This document assumes that you already have a installation of
    simpleSAMLphp running, configured and working. This is the next step
    :)</para>
  </section>

  <section>
    <title>Bridging between protocols</title>

    <para>A bridge between two protocols is built using both an IdP and an SP,
    connected together. To let a SAML 2.0 SP talk to a Shibboleth
    IdP, you build a simpleSAMLphp bridge from a SAML 2.0 IdP and a
    Shibboleth SP.The SAML 2.0 SP talks to the SAML 2.0 IdP, which hands the
    request over to the Shibboleth 1.3 SP, which forwards it to the Shibboleth IdP. 
    This is configured in the IdP hosted metadata, and is controlled by the 
    <code>auth</code> and <code>authority</code> parameters.</para>

    <example>
      <title>Example of bridge configuration</title>

      <para>A bridge configured with a SAML 2.0 IdP and a Shibboleth 1.3 SP:
      In the <filename>saml20-idp-hosted.php</filename> metadata you configure
      the authentication to use Shibboleth 1.3 SP like this:</para>

      <programlisting>'auth' =&gt; 'shib13/sp/initSSO.php',
'authority' =&gt; 'shib13'
</programlisting>

      <para>As no specific Shibboleth IdP is specified as parameter to the
      <filename>initSSO.php</filename> script, the discovery service page will
      be shown. If you want to connect the SAML 2.0 IdP to a specific
      Shibboleth 1.3 IdP, give the entity id as a parameter to the
      <filename>initSSO.php</filename> script:</para>

      <programlisting>'auth' =&gt; 'shib13/sp/initSSO.php?idpentityid=shib13idp.example.org',
'authority' =&gt; 'shib13'
</programlisting>
    </example>
  </section>

  <section>
    <title>Attribute control</title>

    <para>You have several options for controlling which attributes are sent
    to services.This chapter discusses functionality for filtering and
    modification of attributes.</para>

    <section>
      <title>Attribute filtering</title>

      <para>Attribute filtering restricts the selection of attributes sent to
      each service. This option is placed in the service provider metadata
      files.</para>

      <para>In the <filename>shib13-sp-remote.php</filename> or
      <filename>saml20-sp-remote.php</filename> metadata file, you may add a
      parameter <code>attributes</code>, limiting theattributes to be sent to
      the SP to those named in this list. If you omit this parameter, all
      available attributes are sent.</para>

      <example>
        <title>Example of attribute filtering</title>

        <para>Here is a metadata entry for a remote SP that will only receive
        the two attributes <code>eduPersonPrincipalName</code> and
        <code>mail</code>:</para>

        <programlisting>'dev.andreas.feide.no' =&gt; array(
  'AssertionConsumerService' =&gt; 'http://dev.andreas.feide.no/simplesaml/saml2/sp/AssertionConsumerService.php', 
  'SingleLogoutService'      =&gt; 'http://dev.andreas.feide.no/simplesaml/saml2/sp/SingleLogoutService.php',
  'attributes'               =&gt; array('eduPersonPrincipalName', 'mail'),
),</programlisting>
      </example>
    </section>

    <section>
      <title>Attribute name mapping</title>

      <para>When bridging between federations, attribute names may differ for
      a given property. To handle this, you may configure an attribute name
      mapping table.</para>

      <para>The mapping table is defined as a PHP array in a file in the
      <filename>attributemap</filename> directory. E.g. you may define a
      mapping table from Feide to EduGAIN in
      <filename>attributemap/feide2edugain.php</filename> that might look like
      this:</para>

      <programlisting>&lt;?php

$attributemap = array(
  'mobile' =&gt; 'urn:mace:dir:attribute-def:mobile'
);

?&gt;
</programlisting>

      <para>IdP hosted metadata or SP remote metadata may identify an
      attribute name mapping table in the parameter
      <literal>attributemap</literal>.</para>

      <example>
        <title>Example of attribute mapping</title>

        <para>Here is an example of
        <filename>saml20-idp-hosted.php</filename>, configuring the mapping
        table defined above:</para>

        <programlisting>'test.andreas.feide.no' =&gt; array(
 'host'         =&gt; 'dev2.andreas.feide.no',
 'privatekey'   =&gt; 'googleappsidp.pem',
 'certificate'  =&gt; 'googleappsidp.crt',
 'auth'         =&gt; 'auth/login.php',

 'attributemap' =&gt; 'feide2edugain'
),</programlisting>

        <para>This will process the attributemap
        <literal>feide2edugain</literal> for all SPs that connects to the SAML
        2.0 IdP <literal>test.andreas.feide.no</literal>. Alternatively the
        parameter can be configured to the SP remote metadata, where it will
        be processed for that specific SP only.</para>
      </example>
    </section>

    <section>
      <title>Attribute alter functions</title>

      <para>You can implement attribute alter functions that filters, injects,
      modifies or removes attributes. E.g. you may create a function
      extracting the part following the '@' of the eduPersonPrincipalName
      attribute (e.g. <literal>uninett.no</literal> in
      <literal>andreas@uninett.no</literal>), and define this a new attribute
      with the name <literal>realm</literal>.</para>

      <para>Attribute alter functions are named by the attribute name prefixed
      with <code>attributealter_</code>, and are stored in the file
      <filename>attributealter/alterfunctions.php</filename>. The attribute
      alter function should have the name of the attribute, but prefixed with
      <literal>attributealter_</literal>, e.g. <literal>attributealter_realm
      for the <code>realm</code> attribute</literal>. The function signature
      should be:</para>

      <programlisting>function attributealter_realm(&amp;$attributes, $spentityid = null, $idpentityid = null) {</programlisting>

      <para>The function receives a reference to the <code>attributes</code>
      array, containing the attributes that will be sent to the service. h,
      and may add new attributes into this array. The function also receives
      the entity IDs of the SP and the IdP.</para>

      <para>The attribute alter function must be declared in the metadata for
      the IdP or SP metadata, similar to the 'attributemap' parameter
      discussed above: The <code>'attributealter'</code> parameter names the
      attributes defined by attribute alter functions:</para>

      <para><programlisting>'test.andreas.feide.no' =&gt; array(
 'host'           =&gt; 'dev2.andreas.feide.no',
 'privatekey'     =&gt; 'googleappsidp.pem',
 'certificate'    =&gt; 'googleappsidp.crt',
 'auth'           =&gt; 'auth/login.php',

 'attributealter' =&gt; 'realm'
),</programlisting></para>

      <para>If more than one function is defined, the parameter should be an
      array of names.</para>

      <para>Here is the complete example function:</para>

      <programlisting>function attributealter_realm(&amp;$attributes, $spentityid = null, $idpentityid = null) {

  $attributename = 'eduPersonPrincipalName';
  if (array_key_exists($attributename, $attributes)) {
    $eduppn = $attributes[$attributename][0];
    $split = explode('@', $eduppn);
    if (count($split) &gt; 1) {
      $attributes['realm'] = array($split[1]);
    } else {
      SimpleSAML_Logger::debug('attributealter_realm: Wrong format of ' . $attributename . ' (missing @)');
    }
  } else {
    SimpleSAML_Logger::debug('attributealter_realm: Could not find ' . $attributename);
  }

}</programlisting>

      <itemizedlist>
        <listitem>
          <para><ulink
          url="https://ow.feide.no/simplesamlphp:alterfunctions">This wiki
          page on the simpleSAMLphp wiki page is supposed to hold several
          example attribute alter functions as inspiration for others</ulink>.
          Please contribute with your attribute alter functions to this page.
          Contact Andreas, if you have not access to the wiki and want to add
          some examples.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Automatic update of SAML 2.0 Metadata XML from HTTPS</title>

    <para>simpleSAMLphp supports the SAML 2.0 Metadata XML format. There are
    mulitple ways of using simpleSAMLphp with SAML 2.0 Metadata XML documents,
    but the reccomended approach is to use the command line utility
    <filename>bin/parseMetadata.php</filename> to download and parse metadata
    from a HTTPS location. This script will grab the XML document from a URL
    and parse the content and output simpleSAMLphp flat files in a directory. 
    In the <filename>config.php</filename> configuration you should configure 
    simpleSAMLphp to read these files generated by
    <filename>parseMetadata.php</filename>.</para>
  </section>

  <section>
    <title>Automated testing</title>

    <para>simpleSAMLphp includes a test script that can connect to a simpleSAMLphp
    SP, initiate login, enter some credentials. It then picks up the response
    to the SP and validates it, checking the output for expected attributes.</para>

    <para>The intention of this script is to be run in system monitoring
    systems, like nagios or hobbit, to generate alerts when something breaks
    (e.g. a server is down or metadata misconfigured).</para>

    <para>The test script is located in <filename>bin/test.php</filename>.
    The configuration file is located in
    <filename>config/test.php</filename>.</para>

    <para>Documentation about configuration file format and more details about
    this test script will be added later. If you e.g. write a nagios
    plugin for this test script, let us know :) We will add a hobbit plugin
    and publish it somewhere pretty soon. Stay tuned!</para>
  </section>


  <section>
    <title>Support</title>

    <para>If you need help to make this work, or want to discuss simpleSAMLphp
    with other users of the software, you are fortunate: Around simpleSAMLphp
    there is a great Open source community, and you are welcome to join! The
    forums are open for you to ask questions, contribute answers other further
    questions, request improvements or contribute with code or plugins of your
    own.</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://rnd.feide.no/simplesamlphp">simpleSAMLphp
        homepage (at Feide RnD)</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="http://rnd.feide.no/view/simplesamlphpdocs">List of
        all available simpleSAMLphp documentation</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://rnd.feide.no/content/simplesamlphp-users-mailinglist">Join
        the simpleSAMLphp user's mailing list</ulink></para>
      </listitem>

      <listitem>
        <para><ulink url="https://ow.feide.no/simplesamlphp:start">Visit and
        contribute to the simpleSAMLphp wiki</ulink></para>
      </listitem>
    </itemizedlist>
  </section>
</article>