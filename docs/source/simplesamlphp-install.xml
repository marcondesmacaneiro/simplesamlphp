<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <title>simpleSAMLphp Installation and Configuration</title>

  <articleinfo>
    <date>2007-08-30</date>

    <pubdate>Wed Mar  5 08:15:51 2008</pubdate>

    <author>
      <firstname>Andreas Ã…kre</firstname>

      <surname>Solberg</surname>

      <email>andreas.solberg@uninett.no</email>
    </author>
  </articleinfo>

  <warning>
    <para>This version of this document is work in progress. We are currently
    working on updating the document to</para>
  </warning>

  <section>
    <title>News about simpleSAMLphp</title>

    <para>To get the latest news about simpleSAMLphp you can follow this url:
    <ulink
    url="http://rnd.feide.no/taxonomy/term/4">http://rnd.feide.no/taxonomy/term/4</ulink>.</para>

    <para>Here is the simpleSAMLphp homepage:</para>

    <para><ulink
    url="http://rnd.feide.no/simplesamlphp">http://rnd.feide.no/simplesamlphp</ulink></para>
  </section>

  <section>
    <title>Download and install simpleSAMLphp</title>

    <para>You can go to <ulink
    url="http://code.google.com/p/simplesamlphp/">code.google.com/p/simplesamlphp/</ulink>
    to find the most recent release of simpleSAMLphp. Download the zipped
    file, and unzip it on your webserver. However I hightly reccomend running
    from a subversion checkout instead.</para>

    <section>
      <title>Getting a working copy of simpleSAMLphp from subversion</title>

      <para>Go to the directory where you want to install
      simpleSAMLphp:</para>

      <screen>cd /var</screen>

      <para>Then do a subversion checkout:</para>

      <screen>svn checkout http://simplesamlphp.googlecode.com/svn/trunk/ simplesamlphp</screen>

      <para>If you know subversion you know how to view logs and review
      changes to the files. To update the version you have checked out,
      enter:</para>

      <screen>cd /var/simplesamlphp
svn up</screen>
    </section>
  </section>

  <section>
    <title>Making configuration and metadata files</title>

    <para>Configuration and metadata files are stored in a template format,
    you need to copy them to have your local copies. The reason why it is done
    this way, is that when you upgrade you can do svn up in subversion or just
    copy the whole directory over your installation, without replacing your
    existing configuration. When you are updating, you should investigate
    whether the config format is changed, this should be documented in the
    changelog.</para>

    <para>Here are the steps you need to do to create local configuration
    files:</para>

    <screen>cd /var/simplesamlphp
cp -r config-templates/*.php config/
cp -r metadata-templates/*.php metadata/
</screen>
  </section>

  <section>
    <title>Configuring apache</title>

    <para>In this example simpleSAMLphp is located in
    <filename>/var/simplesamlphp</filename>, that is the default location. If
    you want to modify this location, you can do so freely, but then you need
    to update the path in a few files. <link linkend="sect.altlocations">I
    wrote a separate chapter about that, read on</link>.</para>

    <para>Of the folders inside simplesamlphp, only the www folder needs to be
    accessible from the web. There are several ways of putting the
    simpleSAMLphp depending on the way web sites are structured on your apache
    web server. Here is what I believe is the best configuration.</para>

    <para>Find the apache configuration file for the virtual hosts that you
    want to run simpleSAML on. The configuration may look like this:</para>

    <programlisting>&lt;VirtualHost  *&gt;
        ServerName service.example.com
        DocumentRoot /var/www/service.example.com

        Alias /simplesaml /var/simplesamlphp/www
&lt;/VirtualHost&gt;
</programlisting>

    <para>What is special is the <literal>Alias</literal> directive. That
    directive will give control to simpleSAMLphp for all urls that matches
    <literal>http(s)://service.example.com/simplesaml/*</literal>.
    simpleSAMLphp will need to have several SAML interfaces available on the
    web, and all these interfaces are included in the <filename>www</filename>
    subdirectory of your simpleSAMLphp installation. You can set the alias to
    whatever you want, but this alias must be set in the
    <filename>config.php</filename> file of simpleSAML as described in <xref
    linkend="sect.config" />. Here is an example of how this configuration may
    look like in <filename>config.php</filename>:</para>

    <programlisting>$config = array (
[...]
	'baseurlpath'			=&gt; 'simplesaml/',</programlisting>
  </section>

  <section>
    <title>simpleSAMLphp configuration: config.php</title>

    <para>placeholder. will add more text.</para>
  </section>

  <section>
    <title>The simpleSAMLphp installation webpage</title>

    <para>When you have installed simpleSAMLphp, you can access the homepage
    of your installation, which contains some information and a few links to
    the test services. The url of an installation can be in example:</para>

    <literallayout>https://service.example.com/simplesaml/</literallayout>

    <para>The exact link depends on how you set it up with apache and off
    course your hostname.</para>

    <warning>
      <para>Don't click on any of the links yet, because they require you to
      eigther have setup simpleSAMLphp as an Service Provider or as an
      Identity Provider.</para>
    </warning>

    <para>Here is an example screenshot of what the simpleSAMLphp page looks
    like:</para>

    <figure>
      <title>Screenshot of the simpleSAMLphp installation page.</title>

      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="resources/simplesamlphp-install/screenshot-installationpage.png" />
          </imageobject>
        </mediaobject>
      </screenshot>
    </figure>
  </section>

  <section>
    <title>Next steps</title>

    <para>You have now successfully installed simpleSAMLphp, and the next
    steps depends on whether you want to setup a service provider, to protect
    a website with authentication or if you want to setup an identity provider
    and connect it to a user storage. We will also provide documentation on
    bridging federation protocols in a separate document.</para>

    <itemizedlist>
      <listitem>
        <para><ulink
        url="http://rnd.feide.no/content/using-simplesamlphp-service-provider">Setting
        up simpleSAMLphp as a service provider</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://rnd.feide.no/content/using-simplesamlphp-identity-provider">Setting
        up simpleSAMLphp as an identity provider</ulink></para>
      </listitem>

      <listitem>
        <para><ulink
        url="http://rnd.feide.no/content/using-simplesamlphp-bridge-federation-protocols">Setting
        up simpleSAMLphp as a bridge</ulink></para>
      </listitem>
    </itemizedlist>
  </section>

  <appendix id="sect.altlocations">
    <title>Installing simpleSAMLphp in alternative locations</title>

    <para>If you want to install simpleSAMLphp in an alternative directory,
    feel free to do so. You need to set the path of the installation directory
    in the config.php file:</para>

    <programlisting>$config = array (
[...]
	'basedir' 				=&gt; '/usr/local/simplesaml/simplesamlphp',</programlisting>

    <para>And you also need to modify the Alias directive in the apache
    configuration:</para>

    <programlisting>        Alias /simplesaml /usr/local/simplesaml/simplesamlphp/www</programlisting>
  </appendix>
</article>