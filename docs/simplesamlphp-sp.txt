SimpleSAMLphp Service Provider QuickStart
=========================================

<!-- 
	This file is written in Markdown syntax. 
	For more information about how to use the Markdown syntax, read here:
	http://daringfireball.net/projects/markdown/syntax
-->

  * Version: `$Id$`


This guide will describe how to configure simpleSAMLphp as a service provider (SP). You should previously have installed simpleSAMLphp as described in [the simpleSAMLphp installation instructions](http://rnd.feide.no/content/installing-simplesamlphp).


Enabling the Service Provider functionality
--------------------------------------------

The first that must be done is to enable the service provider functionality. This is done by editing `config/config.php`. The options `enable.saml20-sp` and `enable.shib13-sp` controls whether SAML 2.0 and Shibboleth 1.3 support is enabled. Enable one or both of those by assigning `true` to them:

    'enable.saml20-sp'  => true,
    'enable.saml20-idp' => false,
    'enable.shib13-sp'  => true,
    'enable.shib13-idp' => false,


Configuring the SP
------------------

The SP is configured by the metadata stored in `metadata/saml20-sp-hosted.php` and `metadata/shib13-sp-hosted.php`. Which of the two files you need to edit depends on what protocol you wish to use. This is a minimal configuration for a SP:

    <?php
    $metadata = array(
        /*
         * Dynamically generated entity id. Will use the address where metadata can be downloaded.
         */
        '__DYNAMIC:1__' => array(
            /*
             * The hostname for this SP. This makes it possible to run multiple
             * SPs from the same configuration. '__DEFAULT__' means that this one
             * should be used by default.
             */
            'host' => '__DEFAULT__',
        ),
    );
    ?>

For more information about available options in the sp-hosted metadata files, see the [SP hosted reference](https://rnd.feide.no/content/sp-hosted-metadata-reference).


Adding IdPs to the SP
---------------------

The service provider you are configuring needs to know about the identity providers you are going to connect to it. This is configured by metadata stored in `metadata/saml20-idp-remote.php` and `metadata/shib13-sp-remote.php`. This is a minimal example of a `metadata/saml20-idp-remote.php` metadata file:

    <?php
    $metadata = array(
        'https://openidp.feide.no' => array(
            'SingleSignOnService'  => 'https://openidp.feide.no/simplesaml/saml2/idp/SSOService.php',
            'SingleLogoutService'  => 'https://openidp.feide.no/simplesaml/saml2/idp/SingleLogoutService.php',
            'certFingerprint'      => 'c9ed4dfb07caf13fc21e0fec1572047eb8a7a4cb',
        ),
    );
    ?>

For more information about available options in the idp-remote metadata files, see the [IdP remote reference](https://rnd.feide.no/content/idp-remote-metadata-reference).

If you have the metadata of the remote IdP as an XML file, you can use the built-in XML to simpleSAMLphp metadata converter, which by default is available as `/admin/metadata-converter.php` in your simpleSAMLphp installation.

Note that the idp-remote file lists all IdPs you trust. You should remove all IdPs that you don't use.


Setting the default IdP
-----------------------

The global configuration (`config.php`) holds a parameter to set the default IdP to use. Alternatively you can specify which IdP to use in a parameter to the initSSO.php script when you initiate logon in your application.

Here is an example from `config.php`:

	'default-saml20-idp' => 'https://openidp.feide.no',

There is also a `default-shib13-idp`, which configures the same for Shibboleth 1.3 SPs.


### Using the discovery service

If you want end users to be able to select one of several specified entries in IdP remote metadata, set the default IdP to be `NULL`. simpleSAMLphp will then use its builtin IdP discovery service to let the user select IdP. Here is the neccessary configuration from `config.php`:

     'default-saml20-idp' => NULL,
     'default-shib13-idp' => NULL,


Exchange metadata with the IdP
------------------------------

If you are testing against `openidp.feide.no`, you can skip this step. You must however make sure that OpenIdP can download your metadata. This means that if you are installing on `sp.example.org`, and simpleSAMLphp is installed under `https://sp.example.org/simplesaml`, you must make sure that this URL is accessible from the Internet.

Before you can run the test examples, you need the people running the IdP to load the metadata for your SP. This metadata can be generated automatically. Links to the generated metadata can be found under the `Metadata`-tab on the front page.

Send this metadata document to the IdP and ask them to load it.

![image](http://rnd.feide.no/files/saml2metadata.png) 

If you are connected to Feide, and put one of Feides entity IDs as default IdP, you will see an additional section on this page:

![image](http://rnd.feide.no/files/saml2metadata-feide.png) 

Enter your email address and click the button "Send my metadata to Feide". Remeber to get in contact with Feide to discuss your new service, and how you can be connected to Feide's test environment. To test your service, you must have a valid Feide login name. If you are not affiliated with a Feide host institution, you may obtain a test user identity from Feide.


Test the SAML 2.0 SP examples
-----------------------------

After the metadata is is configured on the IdP, you should be able to test the configuration. The installation page of simpleSAMLphp has a link to a Shibboleth 1.3 and a SAML 2.0 sample service. When you click the link, you should be automatically redirected to the IdP. Login, and you should be sent back and shown all the attributes sent form the IdP.

**Figure&nbsp;1.&nbsp;Screenshot of the status page after an user have succesfully authenticated**

![Screenshot of the status page after an user have succesfully authenticated](http://rnd.feide.no/files/screenshot-example.png)


Integrating authentication with your own application
----------------------------------------------------

For those web resources you want to protect, you must add a few
lines of PHP code:

-   Check whether the user is already authenticated.

-  
    If the user is not authenticated, but should be for this resource,
    redirect him to the `initSSO.php` script with the appropriate
    parameters. Note particularly the `RelayState` specifying the
    return URL after login.

-  
    If authentication is successful, but you need to determine the
    user's authorization, read the user attributes supplied by the IdP
    from the session object. If you need user attributes beyond those
    supplied by the IdP, you may maintain an exteded user description
    in you own database, using the (authenticated) user ID as a key.


Sample code:

We start off with including a common file \_include.php. This will add the simpleSAMLphp libraries to the PHP class autoloader.

    require_once('../_include.php');

We load the current simpleSAMLphp session object:

    /* Load simpleSAMLphp configuration and session. */
    $config = SimpleSAML_Configuration::getInstance();
    $session = SimpleSAML_Session::getInstance();

Then check whether the session is valid. If not, redirect the user to the IdP, specifying the `initSSO.php` script (for SAML 2.0 or Shibboleth 1.3, respectively). adding the current URL as a `RelayState` parameter. The user will leave your web page temporarily. When he returns after successful authentication, there will be a valid session, and the body of the `if` statement is skipped.

    /* Check if valid local session exists. */
    if (!$session->isValid('saml2') ) {
      /* Redirect to the IdP for authentication. */
      SimpleSAML_Utilities::redirect(
        '/' . $config->getBaseURL() . 'saml2/sp/initSSO.php',
        array('RelayState' => SimpleSAML_Utilities::selfURL())
        );
    }

After successful athentication, user attributes supplied by the IdP are available in session object. To take a closer look at the attributes array, you may print it out...

    $attributes = $session->getAttributes();
    print_r($attributes);

(Obviously, printing out all attributes this way would be done in a test phase only!)

Each attribute name can be used as an index into $attributes to obtain the value. Every attribute value is an array - a single-valued attribute is an array of a single element.


Support
-------

If you need help to make this work, or want to discuss simpleSAMLphp with other users of the software, you are fortunate: Around simpleSAMLphp there is a great Open source community, and you are welcome to join! The forums are open for you to ask questions, contribute answers other further questions, request improvements or contribute with code or plugins of your own.

-  [simpleSAMLphp homepage (at Feide RnD)](http://rnd.feide.no/simplesamlphp)
-  [List of all available simpleSAMLphp documentation](http://rnd.feide.no/view/simplesamlphpdocs)
-  [Join the simpleSAMLphp user's mailing list](http://rnd.feide.no/content/simplesamlphp-users-mailinglist)
-  [Visit and contribute to the simpleSAMLphp wiki](https://ow.feide.no/simplesamlphp:start)
